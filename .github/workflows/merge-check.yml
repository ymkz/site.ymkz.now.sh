on:
  pull_request:
    types: [synchronize, opened, reopened, closed]
env:
  CI: true
  TZ: Asia/Tokyo
  CACHE: apple
  IDENTIFIER: ymkzco-pr-${{ github.event.number }}
jobs:
  dump:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "node: `node --version`"
          echo "npm:  v`npm --version`"
          echo "yarn: v`yarn --version`"
          echo "now:  v`now --version`"
      - run: |
          echo "CI: ${CI}"
          echo "TZ: ${TZ}"
          echo "CACHE: ${CACHE}"
          echo "IDENTIFIER: ${IDENTIFIER}"
      - run: date
      - run: echo "${GITHUB_CONTEXT}"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
  check:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize'
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=version::$(cat .node-version)"
        id: node-version
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node-version.outputs.version }}
      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ env.CACHE }}-${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ env.CACHE }}-${{ runner.os }}-yarn-
      - run: yarn install --frozen-lockfile
        if: steps.yarn-cache.outputs.cache-hit != 'true'
      - run: yarn run lint
      - run: yarn run typecheck
  build:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize'
    needs: check
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=version::$(cat .node-version)"
        id: node-version
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node-version.outputs.version }}
      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ env.CACHE }}-${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ env.CACHE }}-${{ runner.os }}-yarn-
      - uses: actions/cache@v1
        id: build-cache
        with:
          path: .next
          key: ${{ env.CACHE }}-${{ runner.os }}-build-$GITHUB_SHA
          restore-keys: ${{ env.CACHE }}-${{ runner.os }}-build-$GITHUB_SHA
      - run: yarn run build
      # - run: yarn run build | awk '/Page/,/webpack/' > build-result.txt
  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize'
    needs: build
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=version::$(cat .node-version)"
        id: node-version
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node-version.outputs.version }}
      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ env.CACHE }}-${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ env.CACHE }}-${{ runner.os }}-yarn-
      - uses: actions/cache@v1
        id: build-cache
        with:
          path: .next
          key: ${{ env.CACHE }}-${{ runner.os }}-build-$GITHUB_SHA
          restore-keys: ${{ env.CACHE }}-${{ runner.os }}-build-$GITHUB_SHA
      - run: >
          now
          deploy
          --token ${{ secrets.ZEIT_TOKEN }}
          --no-clipboard
          > deployment-preview-url.txt
      - run: >
          now
          alias
          --token ${{ secrets.ZEIT_TOKEN }}
          `cat deployment-preview-url.txt`
          ${{ env.IDENTIFIER }}.now.sh
      - run: >
          curl
          -X POST
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
          -d "{ \"body\": \"Ready to preview deploy\n- Preview: https://${{ env.IDENTIFIER }}.now.sh\" }"
          ${{ github.event.pull_request.comments_url }}
        if: github.event.action == 'opened'
  # visual-regression-test:
  #   runs-on: ubuntu-latest
  #   if: github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize'
  #   needs: deploy-preview
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: echo "::set-output name=version::$(cat .node-version)"
  #       id: node-version
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ steps.node-version.outputs.version }}
  #     - uses: actions/cache@v1
  #       id: yarn-cache
  #       with:
  #         path: node_modules
  #         key: ${{ env.CACHE }}-${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
  #         restore-keys: ${{ env.CACHE }}-${{ runner.os }}-yarn-
  #     - run: yarn run test
  #       env:
  #         IDENTIFIER: ${{ env.IDENTIFIER }}
  #     - run: echo "::set-output name=exist::$(test -f e2e/__image_snapshots__/__diff_output__/${{ env.IDENTIFIER }}-diff.png)"
  #       id: diff-file
  #       if: always()
  #     - run: echo "${{ steps.diff-file.outputs.exist }}"
  #       if: always()
  #     - uses: peter-evans/commit-comment@v1
  #       if: always()
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         body: Visual Regression Test
  #         path: e2e/__image_snapshots__/__diff_output__/${{ env.IDENTIFIER }}-diff.png
  remove-preview:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - run: >
          curl
          "https://api.zeit.co/v11/now/deployments/get?url=${{ env.IDENTIFIER }}.now.sh"
          -H "Authorization: Bearer ${{ secrets.ZEIT_TOKEN }}"
          | jq -r ".id"
          > deployment-preview-id.txt
      - run: >
          now
          remove
          --token ${{ secrets.ZEIT_TOKEN }}
          --yes
          `cat deployment-preview-id.txt`
